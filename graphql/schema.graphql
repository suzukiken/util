schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
type JwtClaimIdentity {
  userId: String
  providerName: String
  providerType: String
  issuer: String
  primary: String
  dateCreated: String
}
type JwtClaims {
  at_hash: String
  sub: String
  cognito_groups: [String]
  email_verified: Boolean
  iss: String
  cognito_username: String
  aud: String
  identities: [JwtClaimIdentity]
  token_use: String
  auth_time: String
  exp: String
  iat: String
  email: String
}
type CloudFormationExport {
  stack: String
  name: String
  value: String
  imports: [String]
}
type Fiction {
  id: String
  sku: Int
  name: String
  pcs: Int
  ship: AWSDate
}
input FictionInput {
  id: String
  sku: Int
  name: String
  pcs: Int
  ship: AWSDate
}
input LankInput {
  id: String
  lank: Int
}
type RequestedId {
  id: String
}
type Event {
  message: String
}
type Product {
  id: ID!
  title: String!
}
type Article {
  id: String
  content: String
  date: AWSDate
  tags: [String]
  title: String
}
type BlogArticleHighlight {
  title: [String]
  content: [String]
  category: [String]
  tags: [String]
}
type BlogArticle {
  id: String
  title: String
  content: String
  category: String
  tags: [String]
  date: String
  lank: Int
  highlight: BlogArticleHighlight
}
type Query {
  get(id: String): String
  listCrossStackReferences: [ CloudFormationExport ]
  parseJwt: JwtClaims
  listFictions: [ Fiction ]
  searchProduct(title: String!): [ Product ]
  searchProductPhrase(title: String!): [ Product ]
  listProducts: [ Product ]
  searchBlogs(word: String): [ BlogArticle ]
  getArticle(id: String): Article
  listArticles(limit: Int): [ Article ]
  searchArticles(word: String): [ Article ]
}
type Mutation {
  updateFiction(input: FictionInput): Fiction
  deleteFiction(id: String): Fiction
  batchDeleteFictions(ids: [String]): [ RequestedId ]
  batchPutFictions(fictions: [FictionInput]): [ Fiction ]
  putEvent(message: String): Event
  updateBlogLank(input: LankInput): BlogArticle
}
type Subscription {
  eventHappened: Event
  @aws_subscribe(mutations: ["putEvent"])
}

